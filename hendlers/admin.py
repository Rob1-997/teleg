import os
import html
from aiogram import Router, F, types
from aiogram.types import Message ,CallbackQuery , InlineKeyboardButton , InlineKeyboardMarkup , BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from utils.i18n import t
from database import (
        set_admin, is_admin, search_profiles_by_name , get_profile_counts, get_all_users ,get_profile,
        get_online_count , ban, unban, get_all_bans ,get_messages_between , get_pairs , is_banned ,get_display_name)

import hendlers.keybords as kb
from collections import defaultdict
media_cache: dict[int, list[tuple[str, str, str | None]]] = defaultdict(list)

router = Router()

PASS = os.getenv("ADMIN_PASSWORD", )
ADMIN_ID = int(os.getenv("ADMIN_ID", ))

# ‚Äî‚Äî‚Äî FSM: –∂–¥—ë–º –ø–∞—Ä–æ–ª—å ‚Äî‚Äî‚Äî
class Auth(StatesGroup):
    wait_pass = State()

class Cast(StatesGroup):
    wait_text    = State()   # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    wait_confirm = State()


class SearchUsers(StatesGroup):
    wait_name = State()
    viewing   = State()

def admin_only(handler):
    async def wrapper(event, *a, **kw):
        if await is_admin(event.from_user.id):
            return await handler(event, *a, **kw)
        await event.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    return wrapper

async def safe_edit_text(message, text, **kwargs):
    try:
        await message.edit_text(text, **kwargs)
    except TelegramBadRequest as e:
        # –∏–Ω–æ–≥–¥–∞ e.args = () ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if len(e.args) == 0 or "message is not modified" in e.args[0]:
            return
        # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, **kwargs)

# ‚Äî‚Äî‚Äî –∫–æ–º–∞–Ω–¥–∞/—Å–ª–æ–≤–æ ¬´admin¬ª ‚Äî‚Äî‚Äî
@router.message(F.text.casefold() == "admin")
async def ask_pass(msg: types.Message, state: FSMContext):
    # —Ö–æ–∑—è–∏–Ω –±–µ–∑ –ø–∞—Ä–æ–ª—è
    if msg.from_user.id == ADMIN_ID:
        await set_admin(msg.from_user.id, True)
        return await msg.answer("üõ† –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –≤–∫–ª—é—á—ë–Ω.", reply_markup=kb.admin_menu)

    await state.set_state(Auth.wait_pass)
    await msg.answer(
        f"–í–∞—à ID: <code>{msg.from_user.id}</code>\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        parse_mode="HTML"
    )

@router.message(F.text == "/answer_cancel")
async def cancel(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    row = await get_profile(user_id)
    lang = row.get("lang") or "ru"
    await state.clear()
    await msg.answer(t('btn_cancel' , lang))


@router.message(Auth.wait_pass)
async def check_pass(msg: types.Message, state: FSMContext):
    if msg.text == PASS:
        await set_admin(msg.from_user.id, True)
        await state.clear()
        return await msg.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=kb.admin_menu)
    await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.")

# ‚Äî‚Äî‚Äî —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤ ‚Äî‚Äî‚Äî


# ‚Äî‚Äî‚Äî /stats ‚Äî‚Äî‚Äî
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@admin_only
async def stats(msg: types.Message, **_):
    total, male, female = await get_profile_counts()
    await msg.answer(f"–í—Å–µ–≥–æ: {total}\n–ü–∞—Ä–Ω–∏: {male}\n–î–µ–≤—É—à–∫–∏: {female}")

# ‚Äî‚Äî‚Äî /send —Ä–∞—Å—Å—ã–ª–∫–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è) ‚Äî‚Äî‚Äî


@router.message(F.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞")
@admin_only
async def ask_bcast(msg: types.Message, state: FSMContext, **_):
    await state.set_state(Cast.wait_text)
    await msg.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        reply_markup=kb.bcast_cancel_kb     # –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
    )

@router.message(Cast.wait_text, F.text)
async def preview_bcast(msg: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ‚Üí —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—Ç–º–µ–Ω–æ–π
    if msg.text in {"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üü¢ –û–Ω–ª–∞–π–Ω 24 —á",
                    "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV", "üîç –ü–æ–∏—Å–∫", "üö´ –ë–ª–æ–∫-–ª–∏—Å—Ç",
                    "üö´ –ë–∞–Ω-–ª–∏—Å—Ç", "‚ùå –û—Ç–º–µ–Ω–∞", "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"}:
        await state.clear()
        return await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb.admin_menu)

    await state.update_data(text=msg.text)
    await state.set_state(Cast.wait_confirm)

    await msg.answer(
        f"‚ùóÔ∏è <b>–ü–†–ï–í–¨–Æ —Ä–∞—Å—Å—ã–ª–∫–∏</b> ‚ùóÔ∏è\n\n{msg.text}",
        parse_mode="HTML",
        reply_markup=kb.bcast_confirm_kb()   # ‚úÖ / ‚ùå
    )

@router.callback_query(F.data == "bcast_cancel", Cast.wait_confirm)
@admin_only
async def cancel_bcast(cb: CallbackQuery, state: FSMContext, **_):   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ **_
    await state.clear()

    # (1) –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫
    await cb.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # (2) –≤—ã–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    await cb.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=await kb.menu_for(cb.from_user.id)
    )
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data == "bcast_send", Cast.wait_confirm)
@admin_only
async def do_cast(cb: CallbackQuery, state: FSMContext, **_):
    data = await state.get_data()
    text = data["text"]
    await state.clear()

    users = await get_all_users()      # [(id, name), ...]
    ok = err = 0
    for uid, _ in users:
        try:
            await cb.bot.send_message(uid, text)
            ok += 1
        except: err += 1

    await cb.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{ok}</b>\n–û—à–∏–±–æ–∫: <b>{err}</b>",
        parse_mode="HTML"
    )
    await cb.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=await kb.menu_for(cb.from_user.id)
    )
    await cb.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")



@router.message(F.text.in_({"/logout", "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"}))
async def logout_cmd(msg: types.Message):
    await set_admin(msg.from_user.id, False)          # —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
    await msg.answer(
        "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω.",
        reply_markup=await kb.menu_for(msg.from_user.id) # –≤–µ—Ä–Ω—ë–º –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é
    )
@router.message(F.text == "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV")
@admin_only
async def export_csv(msg: types.Message, **_):
    import csv, io

    rows = await get_all_users()          # [(id, name), ...]
    if not rows:
        return await msg.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    buf = io.StringIO()
    csv.writer(buf).writerows(rows)
    buf.seek(0)

    await msg.answer_document(
        types.BufferedInputFile(buf.read().encode(),
                                filename="users.csv"),
        caption="–≠–∫—Å–ø–æ—Ä—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
    )


@router.message(F.text == "üü¢ –û–Ω–ª–∞–π–Ω 24 —á")
@admin_only
async def online_now(msg: types.Message, **_):
    n = await get_online_count(24)
    await msg.answer(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á –±–æ—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏: <b>{n}</b>", parse_mode="HTML")

@router.callback_query(F.data.regexp(r"^admin_ban_\d+$"))
@admin_only
async def cb_ban(cb: CallbackQuery, **_):
    uid = int(cb.data.split("_")[2])
    await ban(uid)
    await cb.answer("–ó–∞–±–∞–Ω–µ–Ω üö´")
    await cb.message.edit_reply_markup(
        reply_markup=kb.admin_profile_kb(uid, True)
    )

@router.callback_query(F.data.regexp(r"^admin_unban_\d+$"))
@admin_only
async def cb_unban(cb: CallbackQuery, **_):
    uid = int(cb.data.split("_")[2])
    await unban(uid)
    await cb.answer("–†–∞–∑–±–∞–Ω–µ–Ω ‚úÖ")
    await cb.message.edit_reply_markup(
        reply_markup=kb.admin_profile_kb(uid, False)
    )

# --- –ö–Ω–æ–ø–∫–∞ ¬´üö´ –ë–∞–Ω-–ª–∏—Å—Ç¬ª -----------------------
@router.message(F.text == "üö´ –ë–∞–Ω-–ª–∏—Å—Ç")
@admin_only
async def show_ban_list(msg: types.Message, **_):
    rows = await get_all_bans()
    if not rows:
        return await msg.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –Ω–µ—Ç.", reply_markup=kb.admin_menu)

    users = []
    for r in rows:
        uid = r["telegram_id"]
        # –±–µ—Ä—ë–º –∏–∑ r["name"], –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ ID
        name = r.get("name") or r.get("full_name") or str(uid)
        users.append((uid, name))

    await msg.answer(
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
        reply_markup=kb.bans_list_kb(users)
    )

@router.callback_query(F.data.regexp(r"^admin_unban_\d+$"))
@admin_only
async def unban_from_list(cb: CallbackQuery):
    uid = int(cb.data.split("_")[2])
    await unban(uid)

    rows = await get_all_bans()
    if not rows:
        # —É—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await cb.message.edit_text("–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç.", reply_markup=kb.admin_menu)
    else:
        users = [
            (r["telegram_id"], r["display_name"] or str(r["telegram_id"]))
            for r in rows
        ]
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await cb.message.edit_reply_markup(reply_markup=kb.bans_list_kb(users))

    await cb.answer("–†–∞–∑–±–∞–Ω–µ–Ω ‚úÖ")


# 1) –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
@router.message(F.text == "üëÄ –ü–µ—Ä–µ–ø–∏—Å–∫–∏")
@admin_only
async def show_pairs(msg: types.Message, **_):   #  ‚Üê  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û  **_
    pairs = await get_pairs()
    await msg.answer(
        "–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–∞—Ä—ã):",
        reply_markup=kb.dialog_pairs_kb(pairs)
    )

# 2) –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.regexp(r"^admin_pair_(\d+)_(\d+)$"))
@admin_only
async def show_pair_dialog(cb: CallbackQuery, **_):
    u1, u2 = map(int, cb.data.split("_")[2:])
    rows   = await get_messages_between(u1, u2, 50)

    media_cache[cb.from_user.id].clear()
    lines: list[str] = []
    buttons_row: list[InlineKeyboardButton] = []


    for r in reversed(rows):
        mark = "üü¢" if r["sender_id"] == u1 else "‚ö™"
        ts   = r["sent_at"].strftime("%Y-%m-%d %H:%M")
        name = await get_display_name(r["sender_id"]) or r["sender_id"]

        safe_body = html.escape(r.get("body", ""), quote=False)
        ft, fid  = r.get("file_type"), r.get("file_id")

        if ft and fid:
            idx = len(media_cache[cb.from_user.id]) + 1
            media_cache[cb.from_user.id].append((ft, fid, safe_body or None))

            icon = "üìé"
            buttons_row.append(
                InlineKeyboardButton(text=f"{icon}{idx}", callback_data=f"admin_media_{idx}")
            )
            body = f"[{ft} #{idx}] {safe_body}".strip()
        else:
            body = safe_body

        lines.append(f"{mark} {ts} ‚Äî {name}: {body}")

    text = "\n".join(lines) or "–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç."

    kb_pairs = kb.dialog_pairs_kb(
        users=await get_pairs(),
        media_buttons=buttons_row,
        offset=0
    )

    await safe_edit_text(
        cb.message,
        f"–î–∏–∞–ª–æ–≥ <b>{u1}</b> ‚Üî <b>{u2}</b>\n\n{text}",
        parse_mode="HTML",
        reply_markup=kb_pairs
    )
    await cb.answer()


@router.callback_query(F.data.regexp(r"^admin_media_nav_(\d+)$"))
@admin_only
async def media_nav(cb: CallbackQuery, **_):
    offset = int(cb.data.rsplit("_", 1)[1])
    user_id = cb.from_user.id

    # –í—ã–∑–æ–≤–∏—Ç–µ —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –≤ show_pair_dialog, —á—Ç–æ–±—ã
    # media_cache[user_id] —É–∂–µ –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:
    all_media_buttons = [
        InlineKeyboardButton(text=f"üìé{i+1}", callback_data=f"admin_media_{i+1}")
        for i in range(len(media_cache[user_id]))
    ]

    # –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º offset
    pairs = await get_pairs()
    kb_page = kb.dialog_pairs_kb(
        users=pairs,
        media_buttons=all_media_buttons,
        offset=offset
    )

    await cb.message.edit_reply_markup(reply_markup=kb_page)
    await cb.answer()

@router.callback_query(F.data.startswith("admin_media_"))
@admin_only
async def send_media(cb: CallbackQuery, **_):
    idx = int(cb.data.split("_")[2]) - 1
    lst = media_cache.get(cb.from_user.id, [])

    if idx < 0 or idx >= len(lst):
        return await cb.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)

    ftype, fid, cap = lst[idx]

    if ftype == "photo":
        await cb.message.answer_photo(fid, caption=cap)
    elif ftype == "video":
        await cb.message.answer_video(fid, caption=cap)
    elif ftype == "document":
        await cb.message.answer_document(fid, caption=cap)
    elif ftype == "voice":
        # <-- –≤–æ—Ç —ç—Ç–∞ –≤–µ—Ç–∫–∞
        await cb.message.answer_voice(fid, caption=cap)
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await cb.message.answer_document(fid, caption=cap)

    await cb.answer()



@router.message(F.text == "üîç –ü–æ–∏—Å–∫-–ü—Ä–æ—Ñ–∏–ª–∏")
@admin_only
async def ask_search(msg: types.Message, state: FSMContext, **kwargs):
    await state.set_state(SearchUsers.wait_name)
    await msg.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚ùå /search_cancel ‚Äî –æ—Ç–º–µ–Ω–∞",
        reply_markup=kb.admin_menu
    )

@router.message(F.text == "/search_cancel", SearchUsers.wait_name)
@admin_only
async def cancel_search(msg: types.Message, state: FSMContext, **kwargs):
    await state.clear()
    await msg.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=kb.admin_menu)


# –®–∞–≥ 2: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
@router.message(SearchUsers.wait_name)
@admin_only
async def do_search(msg: types.Message, state: FSMContext, **kwargs):
    query = msg.text.strip()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    await state.update_data(last_query=query)
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ¬´viewing¬ª
    await state.set_state(SearchUsers.viewing)
    rows = await search_profiles_by_name(query)
    if not rows:
        await state.clear()
        return await msg.answer("üîé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb.admin_menu)

    # —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{r['name']} (ID {r['telegram_id']})",
                callback_data=f"view_profile_{r['telegram_id']}"
            )
        ]
        for r in rows
    ]
    keyboard.append([
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_search_results")
    ])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await msg.answer("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=markup)


@router.callback_query(F.data.startswith("view_profile_"))
@admin_only
async def view_profile(cb: types.CallbackQuery, state: FSMContext, **kwargs):
    # –ø–∞—Ä—Å–∏–º ID
    uid = int(cb.data.split("_")[2])
    prof = await get_profile(uid)
    if not prof:
        return await cb.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    text = (
        f"üÜî ID: {uid}\n"
        f"üë§ –ò–º—è: {prof['name']}\n"
        f"üß¨ –ü–æ–ª: {prof['gender']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {prof['age']}\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {prof['location']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {prof['phone']}"
    )
    photo_buf = BufferedInputFile(prof["photo_data"], filename="avatar.jpg")

    # –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–ø–∏—Å–∞—Ç—å¬ª + ¬´–ë–ª–æ–∫/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å¬ª (reply_kb)
    reply_block_kb = kb.reply_kb_def(uid)

    # –∫–Ω–æ–ø–∫–∞ ¬´–ë–∞–Ω/–†–∞–∑–±–∞–Ω¬ª (admin_profile_kb)
    banned = await is_banned(uid)
    ban_kb    = kb.admin_profile_kb(uid, banned)

    # –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∫ —Å–ø–∏—Å–∫—É –ø–æ–∏—Å–∫–∞
    back_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_search_results")
    ]])

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    full_kb = kb.merge_inline(reply_block_kb, ban_kb)
    full_kb = kb.merge_inline(full_kb, back_kb)

    # —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
    await cb.message.answer_photo(
        photo=photo_buf,
        caption=text,
        reply_markup=full_kb
    )
    await cb.answer()


@router.callback_query(F.data == "back_to_search_results")
@admin_only
async def back_to_search_results(cb: types.CallbackQuery, state: FSMContext, **kwargs):
    data  = await state.get_data()
    query = data.get("last_query")
    if not query:
        await cb.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    rows = await search_profiles_by_name(query)
    if not rows:
        await state.clear()
        # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ—Ñ–∏–ª—å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await cb.message.delete()
        return await cb.message.answer(
            "üîé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=kb.admin_menu
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    await cb.message.delete()

    # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton(
            text=f"{r['name']} (ID {r['telegram_id']})",
            callback_data=f"view_profile_{r['telegram_id']}"
        )]
        for r in rows
    ]
    keyboard.append([
        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_search_results")
    ])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    await cb.message.answer("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
    await cb.answer()




